[[chapter_03_abstractions]]
== A Brief Interlude: On Coupling and Abstractions

Allow us a brief digression on the subject of abstractions, dear reader.
We've talked about _abstractions_ quite a lot.  The Repository is an
abstraction over permanent storage for example.  But what makes a good
abstraction?  What do we want from them?  And how do they relate to testing?


[TIP]
====
You can find our code for this chapter at
https://github.com/cosmicpython/code/tree/appendix_project_structure[github.com/cosmicpython/code/tree/chapter_03_abstractions].

----
git clone https://github.com/cosmicpython/code.git
git checkout chapter_03_abstractions
----
====


A key theme in this book, hidden among the fancy patterns, is that we can use
simple abstractions to hide messy details. When we're writing code for fun, or
in a kata,footnote:[A code kata is a small contained programming challenge often
used to practice TDD.  See http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/]
we get to play with ideas freely, hammering things out and refactoring
aggressively. In a large-scale system, though, we become constrained by the
decisions made elsewhere in the system.

When we're unable to change component A for fear of breaking component B, we say
that the components have become coupled. Locally, coupling is a good thing: it's
a sign that our code is working together, each component supporting the others,
fitting in place like the gears of a watch.  In jargon, we say this works when
there is high _cohesion_ between the coupled elements.

Globally, coupling is a nuisance: it increases the risk and the cost of changing
our code, sometimes to the point where we feel unable to make some changes at
all. This is the problem with the ball of mud pattern: as the application grows,
if we're unable to prevent coupling between elements that have no cohesion, that
coupling increases superlinearly until we are no longer able to effectively
change our systems.

We can reduce the degree of coupling within a system
(<<coupling_illustration1>>) by abstracting away the details
(<<coupling_illustration2>>).


[[coupling_illustration1]]
.Lots of coupling
image::images/coupling_illustration1.png[]
[role="image-source"]
----
[ditaa,coupling_illustration1]
+--------+      +--------+
| System | ---> | System |
|   A    | ---> |   B    |
|        | ---> |        |
|        | ---> |        |
|        | ---> |        |
+--------+      +--------+
----


[[coupling_illustration2]]
.Less coupling
image::images/coupling_illustration2.png[]
[role="image-source"]
----
[ditaa,coupling_illustration2]
+--------+                           +--------+
| System |      /-------------\      | System |
|   A    | ---> |             | ---> |   B    |
|        | ---> | Abstraction | ---> |        |
|        |      |             | ---> |        |
|        |      \-------------/      |        |
+--------+                           +--------+
----



In both diagrams, we have a pair of subsystems, with the one dependent on
the other. In the first diagram, there is a high degree of coupling between the
two; the number of arrows indicate lots of different kinds of dependencies
between the two. If we need to change system B, there's a good chance that the
change will ripple through to system A.

In the second, though, we have reduced the degree of coupling by inserting a
new, simpler, abstraction. Because it is simpler, System A has fewer different
kinds of dependencies on the abstraction. The abstraction serves to
protect us from change by hiding away the complex details of whatever system B
does--we can change the arrows on the right without changing the ones on the
left.


=== Abstracting State Aids Testability

Let's see an example. Imagine we want to write some code for synchronizing two
file directories which we'll call the source and the destination.

* If a file exists in the source, but not the destination, copy the file over.
* If a file exists in the source, but has a different name than in the destination,
  rename the destination file to match.
* If a file exists in the destination but not the source, remove it.

Our first and third requirements are simple enough, we can just compare two
lists of paths. Our second is trickier, though. In order to detect renames,
we'll have to inspect the content of files. For this we can use a hashing
function like MD5 or SHA-1. The code to generate a SHA-1 hash from a file is simple
enough.

[[hash_file]]
.Hashing a file (sync.py)
====
[source,python]
----
BLOCKSIZE = 65536

def hash_file(path):
    hasher = hashlib.sha1()
    with path.open("rb") as file:
        buf = file.read(BLOCKSIZE)
        while buf:
            hasher.update(buf)
            buf = file.read(BLOCKSIZE)
    return hasher.hexdigest()
----
====

Now we need to write the bit that makes decisions about what to do, the business
logic if you will.

When we have to tackle a problem from first principles, we usually try to write
a simple implementation, and then refactor towards better design. We'll use
this approach throughout the book, because it's how we write code in the real
world: start with a solution to the smallest part of the problem, and then
iteratively make the solution richer and better designed.

////
[SG] this may just be my lack of Python experience but it would have helped me to see
from pathlib import Path before this code snippet so that I might be able to guess
the type of object "path" in hash_file(path)  - I guess a type hint would
be too much to ask..
////

Our first hackish approach looks something like this:

[[sync_first_cut]]
.Basic sync algorithm (sync.py)
====
[source,python]
[role="non-head"]
----
import hashlib
import os
import shutil
from pathlib import Path

def sync(source, dest):
    # Walk the source folder and build a dict of filenames and their hashes
    source_hashes = {}
    for folder, _, files in os.walk(source):
        for fn in files:
            source_hashes[hash_file(Path(folder) / fn)] = fn

    seen = set()  # Keep track of the files we've found in the target

    # Walk the target folder and get the filenames and hashes
    for folder, _, files in os.walk(dest):
        for fn in files:
            dest_path = Path(folder) / fn
            dest_hash = hash_file(dest_path)
            seen.add(dest_hash)

            # if there's a file in target that's not in source, delete it
            if dest_hash not in source_hashes:
                dest_path.remove()

            # if there's a file in target that has a different path in source,
            # move it to the correct path
            elif dest_hash in source_hashes and fn != source_hashes[dest_hash]:
                shutil.move(dest_path, Path(folder) / source_hashes[dest_hash])

    # for every file that appears in source but not target, copy the file to
    # the target
    for src_hash, fn in source_hashes.items():
        if src_hash not in seen:
            shutil.copy(Path(source) / fn, Path(dest) / fn)
----
====

Fantastic! We have some code and it _looks_ okay, but before we run it on our
hard drive, maybe we should test it?  How do we go about testing this sort of thing?


[[ugly_sync_tests]]
.Some end-to-end tests (test_sync.py)
====
[source,python]
[role="non-head"]
----
def test_when_a_file_exists_in_the_source_but_not_the_destination():
    try:
        source = tempfile.mkdtemp()
        dest = tempfile.mkdtemp()

        content = "I am a very useful file"
        (Path(source) / 'my-file').write_text(content)

        sync(source, dest)

        expected_path = Path(dest) /  'my-file'
        assert expected_path.exists()
        assert expected_path.read_text() == content

    finally:
        shutil.rmtree(source)
        shutil.rmtree(dest)


def test_when_a_file_has_been_renamed_in_the_source():
    try:
        source = tempfile.mkdtemp()
        dest = tempfile.mkdtemp()

        content = "I am a file that was renamed"
        source_path = Path(source) / 'source-filename'
        old_dest_path = Path(dest) / 'dest-filename'
        expected_dest_path = Path(dest) / 'source-filename'
        source_path.write_text(content)
        old_dest_path.write_text(content)

        sync(source, dest)

        assert old_dest_path.exists() is False
        assert expected_dest_path.read_text() == content


    finally:
        shutil.rmtree(source)
        shutil.rmtree(dest)
----
====

Wowsers, that's a lot of setup for two very simple cases! The problem is that
our domain logic, "figure out the difference between two directories," is tightly
coupled to the IO code. We can't run our difference algorithm without calling
the `pathlib`, `shutil`, and `hashlib` modules.

And the trouble is, even with our current requirements, we haven't written
enough tests: the current implementation actually has several bugs (the
`shutil.move()` is wrong for example).  Getting decent coverage and revealing
these bugs means writing more tests, but if they're all as unwieldy as the
ones above, that's going to get real painful, real quick.

On top of that, our code isn't very extensible.  Imagine trying to implement
a `--dry-run` flag which gets our code to just print out what it's going to
do, rather than actually do it.  Or what if we wanted to sync to a remote server,
or to S3?

Our high-level code is coupled to low-level details, and it's making life hard.
As the scenarios we consider get more complex, our tests will get more unwieldy.
We can definitely refactor these tests (some of the cleanup could go into pytest
fixtures for example) but as long as we're doing filesystem operations, they're
going to stay slow, and hard to read and write.


=== Choosing the Right Abstraction(s)

What could we do to rewrite our code to make it more testable?

Firstly we need to think about what our code needs from the filesystem.
Reading through the code, there are really three distinct things happening.
We can think of these as three distinct _responsibilities_ that the code has.

1. We interrogate the filesystem using `os.walk` and determine hashes for a
   series of paths. This is actually very similar in both the source and the
   destination cases.

2. We decide a file is new, renamed, or redundant.

3. We copy, move, or delete, files to match the source.


Remember that we want to find _simplifying abstractions_ for each of these
responsibilities. That will let us hide the messy details so that we can
focus on the interesting logic.footnote:[If you're used to thinking in terms of
interfaces, that's what we're trying to define here.]

NOTE: In this chapter we're refactoring some gnarly code into a more testable
    structure by identifying the separate tasks that need to be done and giving
    each task to a clearly defined actor, along similar lines to the `duckduckgo`
    example from the introduction.

For (1) and (2), we've already intuitively started using an abstraction, a
dictionary of hashes to paths.  You may already have been thinking, "why not
use build up a dictionary for the destination folder as well as the source,
then we just compare two dicts?"  That seems like a very nice way to abstract
the current state of the filesystem:

    source_files = {'hash1': 'path1', 'hash2': 'path2'}
    dest_files = {'hash1': 'path1', 'hash2': 'pathX'}

What about moving from step (2) to step (3)?  How can we abstract out the
actual move/copy/delete filesystem interaction?

We're going to apply a trick here that we'll employ on a grand scale later in
the book. We're going to separate _what_ we want to do from _how_ to do it.
We're going to make our program output a list of commands that look like this:

    ("COPY", "sourcepath", "destpath"),
    ("MOVE", "old", "new"),

Now we could write tests that just use 2 filesystem dicts as inputs, and
expect lists of tuples of strings representing actions as outputs.

Instead of saying "given this actual filesystem, when I run my function,
check what actions have happened?" we say, "given this _abstraction_ of a filesystem,
what _abstraction_ of filesystem actions will happen?"


[[better_tests]]
.Simplified inputs and outputs in our tests (test_sync.py)
====
[source,python]
[role="skip"]
----
    def test_when_a_file_exists_in_the_source_but_not_the_destination():
        src_hashes = {'hash1': 'fn1'}
        dst_hashes = {}
        expected_actions = [('COPY', '/src/fn1', '/dst/fn1')]
        ...

    def test_when_a_file_has_been_renamed_in_the_source():
        src_hashes = {'hash1': 'fn1'}
        dst_hashes = {'hash1': 'fn2'}
        expected_actions == [('MOVE', '/dst/fn2', '/dst/fn1')]
        ...
----
====


=== Implementing Our Chosen Abstractions

That's all very well, but how do we _actually_ write those new
tests, and how do we change our implementation to make it all work?

Our goal is to isolate the clever part of our system, and to be able to test it
thoroughly without needing to set up a real filesystem. We'll create a "core"
of code that has no dependencies on external state, and then see how it responds
when we give it input from the outside world (this kind of approach was characterised
by Gary Bernhardt as
https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell[Functional
Core, Imperative Shell] (FCIS).

Let's start off by splitting the code up to separate the stateful parts from
the logic.


[[three_parts]]
.Split our code into three  (sync.py)
====
[source,python]
----
def sync(source, dest):  #<3>
    # imperative shell step 1, gather inputs
    source_hashes = read_paths_and_hashes(source)
    dest_hashes = read_paths_and_hashes(dest)

    # step 2: call functional core
    actions = determine_actions(source_hashes, dest_hashes, source, dest)

    # imperative shell step 3, apply outputs
    for action, *paths in actions:
        if action == 'copy':
            shutil.copyfile(*paths)
        if action == 'move':
            shutil.move(*paths)
        if action == 'delete':
            os.remove(paths[0])

...

def read_paths_and_hashes(root):  #<1>
    hashes = {}
    for folder, _, files in os.walk(root):
        for fn in files:
            hashes[hash_file(Path(folder) / fn)] = fn
    return hashes


def determine_actions(src_hashes, dst_hashes, src_folder, dst_folder):  #<2>
    for sha, filename in src_hashes.items():
        if sha not in dst_hashes:
            sourcepath = Path(src_folder) / filename
            destpath = Path(dst_folder) / filename
            yield 'copy', sourcepath, destpath

        elif dst_hashes[sha] != filename:
            olddestpath = Path(dst_folder) / dst_hashes[sha]
            newdestpath = Path(dst_folder) / filename
            yield 'move', olddestpath, newdestpath

    for sha, filename in dst_hashes.items():
        if sha not in src_hashes:
            yield 'delete', dst_folder / filename
----
====

<1> The code to build up the dictionary of paths and hashes is now trivially
    easy to write.

<2> The core of our "business logic," which says, "given these two sets of
    hashes and filenames, what should we copy/move/delete?"  takes simple
    data structures and returns simple data structures.

<3> And our top-level function now contains almost no logic whatseover, it's
    just an imperative series of steps: gather inputs, call our logic,
    apply outputs.


Our tests now act directly on the `determine_actions()` function:


[[harry_tests]]
.Nicer looking tests (test_sync.py)
====
[source,python]
----
    def test_when_a_file_exists_in_the_source_but_not_the_destination():
        src_hashes = {'hash1': 'fn1'}
        dst_hashes = {}
        actions = list(determine_actions(src_hashes, dst_hashes, Path('/src'), Path('/dst')))
        assert actions == [('copy', Path('/src/fn1'), Path('/dst/fn1'))]
...

    def test_when_a_file_has_been_renamed_in_the_source():
        src_hashes = {'hash1': 'fn1'}
        dst_hashes = {'hash1': 'fn2'}
        actions = list(determine_actions(src_hashes, dst_hashes, Path('/src'), Path('/dst')))
        assert actions == [('move', Path('/dst/fn2'), Path('/dst/fn1'))]
----
====


Because we've disentangled the logic of our program--the code for identifying
changes--from the low-level details of IO, we can easily test the core of our code.

With this approach we've switched from testing our main entrypoint function,
`sync()`, to testing a lower-level function, `determine_actions()`.  You might
decide that's fine because `sync()` is now so simple.  Or you might decide to
keep some integration/acceptance tests to test that `sync()`.  But there's
another option, which is to modify the `sync()` function so that it can
be unit tested _and_ end-to-end tested;  it's an approach Bob calls
"edge-to-edge testing".


==== Testing Edge-to-Edge with Fakes and Dependency Injection

When we start writing a new system, we often focus on the core logic first,
driving it with direct unit tests. At some point, though, we want to test bigger
chunks of the system together.

We _could_ return to our end-to-end tests, but those are still as tricky to
write and maintain as before. Instead, we often write tests that invoke a whole
system together, but fake the IO, sort of _edge-to-edge_.


[[di_version]]
.Explicit dependencies (sync.py)
====
[source,python]
[role="skip"]
----
def sync(reader, filesystem, source_root, dest_root): #<1>

    source_hashes = reader(source_root) #<2>
    dest_hashes = reader(dest_root)

    for sha, filename in src_hashes.items():
        if sha not in dest_hashes:
            sourcepath = source_root / filename
            destpath = dest_root / filename
            filesystem.copy(destpath, sourcepath) #<3>

        elif dest_hashes[sha] != filename:
            olddestpath = dest_root / dest_hashes[sha]
            newdestpath = dest_root / filename
            filesystem.move(olddestpath, newdestpath)

    for sha, filename in dst_hashes.items():
        if sha not in source_hashes:
            filesystem.delete(dest_root/filename)
----
====

<1> Our top-level function now exposes two new dependencies, a `reader` and a
    `filesystem`

<2> We invoke the `reader` to produce our files dict.

<3> And we invoke the `filesystem` to apply the changes we detect.

TIP: Notice that, although we're using dependency injection, there was no need
    to define an abstract base class or any kind of explicit interface.  In the
    book we often show ABCs because we hope they help to understand what the
    abstraction is, but they're not necessary.  Python's dynamic nature means
    we can always rely on duck typing.

// TODO [KP] Again, one could mention PEP544 protocols here. For some reason, I like them.

[[bob_tests]]
.Tests using DI
====
[source,python]
[role="skip"]
----
class FakeFileSystem(list): #<1>

    def copy(self, src, dest): #<2>
        self.append(('COPY', src, dest))

    def move(self, src, dest):
        self.append(('MOVE', src, dest))

    def delete(self, dest):
        self.append(('DELETE', src, dest))


def test_when_a_file_exists_in_the_source_but_not_the_destination():
    source = {"sha1": "my-file" }
    dest = {}
    filesystem = FakeFileSystem()

    reader = {"/source": source, "/dest": dest}
    synchronise_dirs(reader.pop, filesystem, "/source", "/dest")

    assert filesystem == [("COPY", "/source/my-file", "/dest/my-file")]


def test_when_a_file_has_been_renamed_in_the_source():
    source = {"sha1": "renamed-file" }
    dest = {"sha1": "original-file" }
    filesystem = FakeFileSystem()

    reader = {"/source": source, "/dest": dest}
    synchronise_dirs(reader.pop, filesystem, "/source", "/dest")

    assert filesystem == [("MOVE", "/dest/original-file", "/dest/renamed-file")]
----
====

<1> Bob _loves_ using lists to build simple test doubles, even though his
    co-workers get mad. It means we can write tests like
    ++assert 'foo' not in database++

<2> Each method in our `FakeFileSystem` just appends something to the list so we
    can inspect it later. This is an example of a Spy Object.


The advantage of this approach is that your tests act on the exact same function
that's used by your production code.  The disadvantage is that we have to make
our stateful components explicit and we have to pass them around.
David Heinemeier Hansson, the creator of Ruby on Rails, famously described this
as "test-induced design damage".

In either case, we can now work on fixing all the bugs in our implementation;
enumerating tests for all the edge cases is now much easier.


==== Why Not Just Patch It Out?

At this point you may be scratching your head and thinking
"Why don't you just use `mock.patch` and save yourself the effort?

We avoid using mocks in this book, and in our production code, too. We're not
going to enter into a Holy War, but our instinct is that mocking frameworks,
particularly monkeypatching, are a code smell.

Instead, we like to clearly identify the responsibilities in our codebase, and to
separate those responsibilities out into small, focused objects that are easy to
replace with a test double.

NOTE: You can see an example in <<chapter_08_events_and_message_bus>>
    where we `mock.patch()` out an email-sending module, but eventually we
    replace that with an explicit bit of dependency injection, in
    <<chapter_13_dependency_injection>>.

There are three closely related reasons for our preference:

1.  Patching out the dependency you're using makes it possible to unit test the
code, but it does nothing to improve the design. Using mock.patch won't let your
code work with a `--dry-run` flag, nor will it help you run against an ftp
server. For that, you'll need to introduce abstractions.

2.  Tests that use mocks _tend_ to be more coupled to the implementation details
of the codebase. That's because mock tests verify the interactions between
things: did we call `shutil.copy` with the right arguments? This coupling between
code and test _tends_ to make tests more brittle in our experience.

3.  Over-use of mocks leads to complicated test suites that fail to explain the
code.

NOTE: Designing for testability really means designing for
    extensibility. We trade off a little more complexity for a cleaner design
    that admits novel use-cases.

.Mocks vs Fakes; Classic Style vs London School TDD
*******************************************************************************

Here's a short and somewhat simplistic definition of the difference between
mocks and fakes.

* Mocks are used to verify _how_ something gets used;  they have methods
  like `assert_called_once_with()`.  They're associated with London-school
  TDD.

* Fakes are working implementations of the thing they're replacing, but
  they're only designed for use in tests; they wouldn't work "in real life",
  like our in-memory repository. But you can use them to make assertions about
  the end state of a system, rather than the behaviors along the way, so
  they're associated with classic-style TDD.

(We're slightly conflating mocks with spies and fakes with stubs here, and you
can read the long, correct answer in Martin Fowler's classic essay on the subject
called https://martinfowler.com/articles/mocksArentStubs.html[Mocks aren't Stubs])

(It also probably doesn't help that the `MagicMock` objects provided by
`unittest.mock` aren't, strictly speaking, mocks, they're spies if anything.
But they're also often used as stubs or dummies.  There, promise we're done with
the test double terminology nitpicks now.)

//TODO (hynek) you could mention Alex Gaynor's `pretend` which gives you
// stubs without mocks error-prone magic.

What about London-school vs classic-style TDD?  You can read more about those
two in Martin Fowler's article just cited, as well as
https://softwareengineering.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd[on stackoverflow],
but in this book we're pretty firmly in the classicist camp.  We like to
build our tests around state, both in setup and assertions, and we like
to work at the highest level of abstraction possible rather than doing
checks on the behavior of intermediary collaborators.footnote:[
Which is not to say that we think the London School people are wrong. There
are some insanely smart people that work that way.  It's just not what we're
used to].

Read more on this shortly, in the <<kinds_of_tests,"high gear vs low gear">>
section.

*******************************************************************************

We view TDD as a design practice first, and a testing practice second. The tests
act as a record of our design choices, and serve to explain the system to us
when we return to the code after a long absence.

Tests that use too many mocks get overwhelmed with setup code that hides the
story we care about.

Steve Freeman has a great example of over-mocked tests in his talk
https://www.youtube.com/watch?v=B48Exq57Zg8[Test Driven Development: That's Not What We Meant].
You should also check out this https://www.youtube.com/watch?v=Ldlz4V-UCFw[PyCon talk on Mocking Pitfalls]
by our esteemed tech reviewer, Ed Jung, which also addresses mocking and its
alternatives.

And while we're recommending talks, don't miss
https://www.youtube.com/watch?v=PBQN62oUnN8[Brandon Rhodes talking about "hoisting" I/O"],
which really nicely covers the issues we're talking about, using another simple example.


TIP: In this chapter we've spent a lot of time replacing end-to-end tests with
    unit tests.  That doesn't mean we think you should never use E2E tests!
    In this book we're trying to show techniques that get you to a decent test
    pyramid, with as many unit tests as possible, and the minimum number of E2E
    tests you need to feel confident. Read on to <<types_of_test_rules_of_thumb>>
    for more detail.


.So Which Do We Use in this Book? Functional or Object Oriented Composition?
******************************************************************************
Both. Our domain model is entirely free of dependencies and side-effects,
so that's our functional core.  The service layer that we build around it
(in <<chapter_04_service_layer>>) allows us to drive the system edge-to-edge
and we use dependency injection to provide those services with stateful
components, so we can still unit test them.

See <<chapter_13_dependency_injection>> for more exploration of making our
dependency injection more explicit and centralized.
******************************************************************************

=== Wrap-up: Some Heuristics for Choosing Abstractions

We'll see this idea come up again and again in the book: we can make our
systems easier to test and maintain by simplifying the interface between our
business logic and messy IO. Finding the right abstraction is tricky, but here's
a few heuristics and questions to ask yourself:


* Can I choose a familiar Python datastructure to represent the state of the
  messy system, and try to imagine a single function that can return that
  state?

* Where can I draw a line between my systems, where can I carve out a
  http://www.informit.com/articles/article.aspx?p=359417&seqNum=2[seam],
  to stick that abstraction in?

* What is a sensible way of dividing things up into components with different
  responsibilities?  What implicit concepts can I make explicit?

* What are the dependencies and what is the core "business" logic?


Practice makes less-imperfect!

// TODO (DS): I think this is potentially a great chapter, perhaps belonging
// really on in the book. But it is also a bit of a brain dump of lots of deep,
// amazing concepts. I don't think you've quite found the best structure here
// yet. Perhaps it could be structured around these heuristics?
// (EJ3) Not sure how to structure this better.

And now back to our regular programming...
